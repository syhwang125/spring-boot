MES3.0 Boot Camp 교육 ('19.5.27 ~ 5.31) 

1일차 : java 8
2일차 : spring core - DI, MVC
3일차 : spring cloud 
4일차 : spring boot 
5일차 : project 

1~2일차 : 넥스트리 권기진 강사 
3~5일차 : ICT 

< 1일차 교육 내용 >  Java8 Special 
교재 : https://gitlab.com/kkjin/boot-17th 

1. 상속 (Inheritance) 
1) 상속
자식클래스에서 부모클래스를 접근하기 위해 super() 생성자 사용

public class Child extends Parent { } 

Child ch = new Child();  선언될 경우

java memory 공간 - 5개 중 3개 영역 (static, stack, heap) 메모리 구조
ㄴ static : data segment (static 변수가 붙은 값), code segment (클래스파일 컴파일 코드 영역)
ㄴ stack : method 내에서 선언된 모든 변수, 값  예) ch 
ㄴ heap : 모든 객체가 저장됨   예) Child 객체 + parent 객체, 생성자 

default 생성자 - 파라미터 없고, 아무일도 안하는 생성자. 프레임워크에서는 자동생성함 

public class Aclass {
} 

public class Aclass extends Object {
	Aclass() { 
	  super(); 
	}	
위의 두개는 동일한 코드임 

jpa 에서는 default 생성자를 찾음. 이를 위해 lombok 활용 

오버로딩 - 한 클래스에서 메소드 동일, 파라미터 다름
오버라이딩 - 상속받은 메소드, 동일 시그니처로 새롭게 정의. 접근지정자의 범위는 넓은 범위로만 변경 가능 (예, protected -> public)

접근지정자 
private < default (아무것도 명시하지 않음) < protected < public 

2) 다형성
parent parent = new Child();    upcasting 
Child child = (Child) parent;   downcasting 

3) 인터페이스 

java 8 특징  (pg 14)
인터페이스에도 static , default 메소드가 추가됨
stream() 메소드가 부모클래스에 추가될 경우 차식클래스에서 재정의가 필요하므로 이에 대한 문제를 방지하기 위해 
부모클래스에서 default stream() 메소드를 추가하면 자식클래스에서는 default 로 상속됨
 
2. Collection Framework (pg 16~ )  
1) collect 
stream : for ~ loop 문을 대체함 

iterable > collect > list(순서), set(중복허용x), queue (FIFO)
map (key,value)> sortedMap 

2) generic 
generic type : 박스객체를 만듬. 어떤 객체든 담을 수 있어야 함. 오브젝트 타입이어야 함
모든 컬렉션은 generic으로 선언 

4) set 
customer 클래스를 선언 후 set 에 객체를 넣을때 
equals() 와 hashcode() 메소드에 어떤 항목으로 중복여부를 구분할 것인지 재정의 필요 

set 은 get 메소드가 없음 

java8 부터는 iterator (for,while문) -> stream 으로 변경할 수 있어야 함 

5) List 
LinkedList 가 ArrayList보다 메모리를 2배를 사용함 
데이터의 추가삭제가 빈번할 경우는 linkedList 로 사용하는게 좋음 (추가삭제시 포인터만 변경하면 되므로) 

멀티쓰레드 프로그램에서 arrayList 는 동기화처리가 되지 않으므로 구현해야 함
멀티쓰레드에서 vector, hashtable 은 동기화처리가 되어 있으나 무거움

string 
stringBuilder - 쓰레드 safe 
stringbuffer - 쓰레드 unsafe 

6) Map 
 Collect ct = map.values();
 ct 를 stream 으로 값 추출 

3. Lambda (pg 35) 
1) 람다 표현식 
표현식 : (파라미터) -> { 실행문}; 
예)  a(int n) {
        return n+5; 
     }

람다식 표현 : (n) -> {n+5}    // 실행문을 함수라고 표현 
	 
	 
	Runnable Interface 
Runnable r = (n) -> { n+5 } ;    //r 변수에 대입

r.run(5) ;  			// 어디선가 함수표현식이 실행됨 

메소드로 전달할 수 있는 익명함수를 단순화한 코드의 블록
람다표현식은 특정클래스에 종속되지 않기 때문에 함수라고 함 
람다표현식은 전달인자로 보내거나 변수에 저장하는 것이 가능

함수는 함수형 인터페이스를 제공 
추상메소드가 1개만 있는 인터페이스, 추상클래스라 함수를 선언할 수 있다. 
1개의 추상메소드만 갖고 있어야 함 

코드의 블럭을 변수에 담을 수 있고, 어딘가 파라미터로 보낼 수 있다. 
하나의 추상 메소드를 갖는 인터페이스는 모두 함수형 인터페이스가 될 수 있다. 
함수형 인터페이스를 정의할때 @FunctionalInterface 어노테이션을 이용할 수 있다. 
@UsingFunctionalInterface 하나의 변수에 하나의 함수를 매핑할 수 있다.

람다의 메소드 레퍼런스는 기존클래스의 메소드를 호출하는 것으로 :: 구분자를 통해 활용
정적 메소드 레퍼런스 [클래스::메소드]
인스턴스 메소드 [생성객체::메소드] 

Integer i = new Integer(); -> Integer i = 10;    으로 선언해도 됨. 이를 autoboxing 이라 함 

2) 스트림 (stream) 
패러럴 스트림 
list.stream().forEach( name -> System.out.println(name));
list.parallelStream().

< 실습 > 
spring tool suite (sts) 설치 

단축키
ctrl + shift + o : import class 
ctrl + space : 자동완성

파일 저장 save, load 
GSon : json 

checked exception : compile 시에 예외처리가 되어 있어야 함
unchecked exception 

try { } 블럭에 finally 에서 완료처리해야 할 내용을 선언 
try {
	FileReader fin = new FileReader(FILE_NAME);
    new Gson().fromJson( fin, classOfT )
} catch ( FileNotFoundException e ) {
            // TODO Auto-generated catch block
} finally {
	fin.close(); 
}// 정상,예외 둘다 파일 클로즈 등 사후처리를 했어야 했는데
try () 블럭안에 선언하면 됨

try (FileReader fin = new FileReader(FILE_NAME);){
            new Gson().fromJson( fin, classOfT )
        } catch ( FileNotFoundException e ) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } 
		
  // singleton pattern  
    // multi-thread 환경에서는 singleton instance 보장 못함. 그래서 synchronized 가 필요함 

< 단위테스트 junit >
	mock 객체를 만드는 easymock 등 라이브러리가 있음
	junit test 와 같이 함
	
	@before  : testcase가 실행될때마다 수행 
	@after
	@test 
	
	testcase 는 whitebox testcase 임 . 결과가 명화히 나옴

< GitLab 에 등록하기 >  웹사이트 접속 25@poscoict.co.kr / ymcar

https://gitlab.com/bootcamp17-pd258077/day01-pd258077 	

1) group 생성 : bootcamp17-pd258077

2) repository 생성 : day01-pd258077

3) 로컬레파지토리 생성 

D:\DevOps\sts4workspace\kr.co.posco.java.board>git init
Initialized empty Git repository in D:/DevOps/sts4workspace/kr.co.posco.java.board/.git/

4) 원격레파지토리와 연결 
D:\DevOps\sts4workspace\kr.co.posco.java.board>git remote add origin https://gitlab.com/bootcamp17-pd258077/day01-pd258077.git

5) 소스 커밋 후 푸시
★ 내용 변경될때마다 아래 3가지 작업 반복 
git add .
git commit -m "Initial commit"
git push -u origin master

D:\DevOps\sts4workspace\kr.co.posco.java.board>git push -u origin master
remote: HTTP Basic: Access denied
fatal: Authentication failed for 'https://gitlab.com/bootcamp17-pd258077/day01-pd258077.git/'

★ 로그인 실패로 접속 오류 발생시
 D:\DevOps\sts4workspace\kr.co.posco.java.board>git config --system --unset credential.helper
( 구글검색 github access denied 선택, 조회 / 파일 초기화 한 후 다시 입력할 수 있음 id : syhwang125 / pwd : ymcar )

D:\DevOps\sts4workspace\kr.co.posco.java.board>git push -u origin master

<2일차 교육 내용> Spring MVC , DI, IoC 

1. IoC 
Dependency Injection (의존성 주입_
Inversion of Control (제어의 역전)  

기존에 class -> new 생성자 -> Object 생성했음. 
 
IoC 컨테이너에 의해 제어됨, 의존관계을 주입함 
DI 방법 : setter , constructor, method injection  

spring 2.5 이하버전에서는 xml beans 에 설정하였음 

spring 의존관계 설정은 어노테이션을 사용함 
Bean 이란 spring IoC방식으로 관리하는 객체 
IoC 컨테이너는 빈생성, 제어관점에서 빈 팩토리라고도 함
spring 컨테이너에는 beanfactory <- applicationContext <- WebApplicationContext 가 있음 

★ 어노테이션을 이용해서 빈등록 : @Component, @Service, @Controller , @Repository (store에 해당됨)
ㄴ @Controller : 웹 서블릿에 요청처리하는 컨트롤러 빈
ㄴ @service : 서비스 계층의 클래스
ㄴ @Repository : store에 해당됨. DAO 클래스  
ㄴ @Component : 위의 세가지에 해당되지 않는 것

@Autowired    (spring boot에서는 사용되지 않음) 인터페이스 클래스를 선언 . new() 로 생성하지 않음
@Autowired 가 없으면 생성자 또는 setter 메소드를 찾음 

xml bean 에는 component scan만 추가하면 @component 등 빈을 찾아서 컨테이너에 등록함 
<context:component scan base package =="com.namoo.yorizori.service">
 
@Qualifier : 해당 I/F를 구현한 클래스가 여러개일경우 식별하기 위해 사용 
public CookbookServiceImpl(
         @Qualifier (("cookbook "") CookbookDao cookbookDao,RecipeDao recipeDao) {  } 

@Qualifier (("cookbook") 
private CookbookDao cookbookDao; 


2. MVC 
1) 웹 프레임워크 아키텍처 MVC 패턴 (Model-View-Controller)
model-1방식 : jsp,, php 에서 직접 db access (소규모) 
model-2방식 : mvc 패턴, 엔터프라이즈급 웹 어플리케이션 

 Http요청 -> 스프링컨테이너의 Front Controller (Dispatcher Servlet) -> controller -> model -> view -> Front Controller -> Http 응답 
 
 controller -> service -> json data 로 만드는거 실습 
 
ㄴ ui 영역 (jquery, html, react) 

ㄴ 프리젠테이션 영역 (servlet,  struts, springMVC)
ㄴ 서비스 발행 영역 (jsersey, CXF, springMVC)
ㄴ 비즈니스 로직 영역 (POJO)
ㄴ 자원접근영역 ( mybatis : SQL Mapping ,  JPA : OR Mapping , 하이버네이트 )

ㄴ 자원영역 (데이터베이스, NoSQL, File)  

< 실습 > 
tomcat 설치  (d:/apache/apache-tomcat-9.0.0) 
eclipse > window > preference 에서 tomcat path 설정 , show view 에서 server추가

dynamic web project 생성 
\WebContent
  ㄴ \META-INF 
  ㄴ \WEB-INF 
       ㄴ \lib
	   ㄴ web.xml : dispatcher-servlet 에서 호출해야 하는 클래스 명시 
	   ㄴ 프로젝트 우측메뉴 선택 후 springbeanconfiguration File 추가 ( dispatcher-servlet.xml 생성 )
	   
project 좌측 메뉴 선택 configure > convert  maven project 선택  -> pom.xml 이 생성됨

WEB-INF\dispatcher-servlet.xml (namespace : beans, context, mvc 추가) 
	<mvc:annotation-driven></mvc:annotation-driven>
	<context:component-scan base-package="kr.co.posco.spring.auction"></context:component-scan>

WEB-INF\web.xml 에서 <sevlet>과 <servlet-mapping> 추가 

store 에 클래스 작성, 스프링빈으로 선언 (@Controller, @Reposiotry, @Service 등)
	   
web -> front controller (dispatcherServlet) -> controller -> I/F -> service -> I/F -> store -> DB

WEB-INF\web.xml 에서 <sevlet>과 <servlet-mapping> 추가 
	   
insomnia 64비트 설치 (rest client) 또는 크롬플러그인 postman 설치 

(userController)
userdata sample
{"id":"ce64c5b7-c674-4e0c-9878-7f1a3ddb6615","name":"Seller#1","roles":["Seller"]}
{"id":"4158cb63-f3be-415e-b171-a43546edf075","name":"Bidder#1","roles":["Bidder"]}

(itemController)
item data sample 
{"id":"965a48b7-26d3-4a12-9c7b-322a7f1c1e01","name":"MacBook Pro 15\" Touchbar","description":"2017 Mid","pricePolicy":{"startPrice":2100000,"priceStep":50000},"currentPrice":0,"seller":{"id":"8ad38042-21b8-464e-8504-fc5c2082e4fd","name":"Seller#1"}}

http://localhost:8083/kr.co.posco.spring.auction/item/regist
{"id":"965a48b7-26d3-4a12-9c7b-322a7f1c1e01","name":"MacBook Pro 15\" Touchbar","description":"2017 Mid","pricePolicy":{"startPrice":2100000,"priceStep":50000},"currentPrice":0,"seller":{"id":"8ad38042-21b8-464e-8504-fc5c2082e4fd","name":"Seller#1"}}
http://localhost:8083/kr.co.posco.spring.auction/item/find/itemId/965a48b7-26d3-4a12-9c7b-322a7f1c1e01

http://localhost:8083/kr.co.posco.spring.auction/item/find/sellerId/8ad38042-21b8-464e-8504-fc5c2082e4fd

(BidController) 
bid data
{"id":"31d43842-0aa2-4878-973f-f50cc06ce227","name":"MacBook Pro 15\" Touchbar","description":"2017 Mid","pricePolicy":{"startPrice":2100000,"priceStep":50000},"currentPrice":0,"seller":{"id":"b4c73259-7036-4b91-be6f-2ae030fefac0","name":"Seller#1"}}


@RestController 
public class UserController { 
// 예전엔 이렇게 써는데	@RequestMapping(value="regist", method=RequestMethod.POST)
	@PostMapping(value="regist")
	public String register(@RequestBody User user) {
		return userService.registerUser(user);
	}
// postmapping 에서는 @requestBody 를 넣어줘야 함
	
	@GetMapping(value="find/{userId}")
	public User findById(@PathVariable(value="userId") String id) {
		return userService.findUser(id);
	}
	
}

insomnia 에서 
new request 선택 후 register , findAll, findById 추가  
http://localhost:8083/kr.co.posco.spring.auction/user/find/4158cb63-f3be-415e-b171-a43546edf075 

maven 설치 
maven 도구 : 프로젝트 생성, 배포까지 통합. 라이브러리 
maven repostiory 에서 gson 라이브러리 다운로드 후 build path 에 추가 

cd existing_folder
/d/DevOps/sts4workspace/kr.co.posco.spring.auction
git init
git remote add origin https://gitlab.com/bootcamp17-pd258077/day02-pd258077.git
git add .
git commit -m "Initial commit"
git push -u origin master     (syhwang125 / ymcar)

